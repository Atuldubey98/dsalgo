Definition :  Breaking the problem into smaller subproblems.

1 Solving those subproblems and simply storing the results
2 Reuse those stored results if subproblems occurs
3 Finally using solutions to smaller problems to solutions to bigger problems

1+1+1+1
We have to count it to 4. But if we put +1 now we will get the answer as 5. This is dynamic Programming.
It is optimization over recursion
DP = recursion+memorization
eg = fibonacci series
fibo(0) = 0
fibo(1) = 1
fibo(n-1) + fibo(n-2)

A Questions is solved by DP if both the properties satisfies.

1 Optimal Substructure
problem can be converted to subproblems and subproblems can be solved in Optimal way then it is called optimal Substructure

2 Overlapping subproblems

Bottom up aproach

public int fibo(int n)
{
	int table[]=new int[n+1];
	table[0]=0;
	table[1]=1;
	for(int i=2;i<n;i++)
	{
		table[i]=table[i-1]+table[i-2]
	}
	return table[n];
}


Top Down Approach

It is also callled memoization
we break the large problem into subproblems
each subproblem are solved and solution is remembered
The  each subproblem solution is used when required.
